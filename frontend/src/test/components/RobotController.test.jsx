import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import RobotController from '@/components/RobotController';
import { mockRobotControllerProps, mockAnimationStates } from '../mocks/componentMocks';

// Mock Ant Design components
vi.mock('antd', () => ({
  Button: ({ children, onClick, disabled, type, icon, ...props }) => (
    <button 
      onClick={onClick} 
      disabled={disabled} 
      data-testid={`button-${children}`}
      {...props}
    >
      {icon}
      {children}
    </button>
  ),
  Space: ({ children, ...props }) => (
    <div data-testid="space" {...props}>
      {children}
    </div>
  )
}));

// Mock Ant Design icons
vi.mock('@ant-design/icons', () => ({
  PlayCircleOutlined: () => <span data-testid="play-icon">‚ñ∂</span>,
  PauseCircleOutlined: () => <span data-testid="pause-icon">‚è∏</span>,
  ReloadOutlined: () => <span data-testid="reload-icon">üîÑ</span>,
  StepForwardOutlined: () => <span data-testid="next-icon">‚è≠</span>
}));

describe('RobotController', () => {
  let mockProps;

  beforeEach(() => {
    mockProps = {
      ...mockRobotControllerProps,
      onToggleAnimation: vi.fn(),
      onReset: vi.fn(),
      onNextEpisode: vi.fn()
    };
  });

  describe('ÈªòËÆ§Ê∏≤Êüì', () => {
    it('Â∫îËØ•ËøîÂõûnullÂΩìÊ≤°ÊúâÊåáÂÆöÊ∏≤ÊüìÊ®°ÂºèÊó∂', () => {
      const { container } = render(<RobotController {...mockProps} />);
      expect(container.firstChild).toBeNull();
    });
  });

  describe('ÊñáÊú¨Ê®°ÂºèÊ∏≤Êüì (renderTextOnly)', () => {
    it('Â∫îËØ•ÊòæÁ§∫Ê≠£Á°ÆÁöÑÁä∂ÊÄÅÊñáÊú¨', () => {
      render(<RobotController {...mockProps} renderTextOnly={true} />);
      
      expect(screen.getByText(/Episode: 1/)).toBeInTheDocument();
      expect(screen.getByText(/Â∏ßÊï∞: 1 \/ 100/)).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Êó†Êï∞ÊçÆÁä∂ÊÄÅ', () => {
      const noDataProps = {
        ...mockProps,
        motionDataLength: 0,
        currentEpisode: null
      };
      
      render(<RobotController {...noDataProps} renderTextOnly={true} />);
      
      expect(screen.getByText(/No Episode Selected/)).toBeInTheDocument();
      expect(screen.getByText(/Â∏ßÊï∞: N\/A/)).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Ê≠£Á°ÆÁöÑÂ∏ßÊï∞‰ø°ÊÅØ', () => {
      const playingProps = {
        ...mockProps,
        ...mockAnimationStates.playing
      };
      
      render(<RobotController {...playingProps} renderTextOnly={true} />);
      
      expect(screen.getByText(/Â∏ßÊï∞: 26 \/ 100/)).toBeInTheDocument();
    });
  });

  describe('ÊåâÈíÆÊ®°ÂºèÊ∏≤Êüì (renderButtonsOnly)', () => {
    it('Â∫îËØ•Ê∏≤ÊüìÊâÄÊúâÊéßÂà∂ÊåâÈíÆ', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      expect(screen.getByTestId('button-Êí≠Êîæ')).toBeInTheDocument();
      expect(screen.getByTestId('button-ÈáçÁΩÆ')).toBeInTheDocument();
      expect(screen.getByTestId('button-‰∏ã‰∏Ä‰∏™')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Êí≠ÊîæÊåâÈíÆÂΩìÊú™Êí≠ÊîæÊó∂', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      const playButton = screen.getByTestId('button-Êí≠Êîæ');
      expect(playButton).toBeInTheDocument();
      expect(screen.getByTestId('play-icon')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫ÊöÇÂÅúÊåâÈíÆÂΩìÊ≠£Âú®Êí≠ÊîæÊó∂', () => {
      const playingProps = {
        ...mockProps,
        isAnimating: true
      };
      
      render(<RobotController {...playingProps} renderButtonsOnly={true} />);
      
      const pauseButton = screen.getByTestId('button-ÊöÇÂÅú');
      expect(pauseButton).toBeInTheDocument();
      expect(screen.getByTestId('pause-icon')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ë∞ÉÁî®onToggleAnimationÂΩìÁÇπÂáªÊí≠Êîæ/ÊöÇÂÅúÊåâÈíÆÊó∂', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      const playButton = screen.getByTestId('button-Êí≠Êîæ');
      fireEvent.click(playButton);
      
      expect(mockProps.onToggleAnimation).toHaveBeenCalledTimes(1);
    });

    it('Â∫îËØ•Ë∞ÉÁî®onResetÂΩìÁÇπÂáªÈáçÁΩÆÊåâÈíÆÊó∂', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      const resetButton = screen.getByTestId('button-ÈáçÁΩÆ');
      fireEvent.click(resetButton);
      
      expect(mockProps.onReset).toHaveBeenCalledTimes(1);
    });

    it('Â∫îËØ•Ë∞ÉÁî®onNextEpisodeÂΩìÁÇπÂáª‰∏ã‰∏Ä‰∏™ÊåâÈíÆÊó∂', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      const nextButton = screen.getByTestId('button-‰∏ã‰∏Ä‰∏™');
      fireEvent.click(nextButton);
      
      expect(mockProps.onNextEpisode).toHaveBeenCalledTimes(1);
    });
  });

  describe('ÊåâÈíÆÁ¶ÅÁî®Áä∂ÊÄÅ', () => {
    it('Â∫îËØ•Á¶ÅÁî®ÊâÄÊúâÊåâÈíÆÂΩìÊ≤°ÊúâËøêÂä®Êï∞ÊçÆÊó∂', () => {
      const noDataProps = {
        ...mockProps,
        motionDataLength: 0
      };
      
      render(<RobotController {...noDataProps} renderButtonsOnly={true} />);
      
      const playButton = screen.getByTestId('button-Êí≠Êîæ');
      const resetButton = screen.getByTestId('button-ÈáçÁΩÆ');
      const nextButton = screen.getByTestId('button-‰∏ã‰∏Ä‰∏™');
      
      expect(playButton).toBeDisabled();
      expect(resetButton).toBeDisabled();
      expect(nextButton).toBeDisabled();
    });

    it('Â∫îËØ•ÂêØÁî®ÊåâÈíÆÂΩìÊúâËøêÂä®Êï∞ÊçÆÊó∂', () => {
      render(<RobotController {...mockProps} renderButtonsOnly={true} />);
      
      const playButton = screen.getByTestId('button-Êí≠Êîæ');
      const resetButton = screen.getByTestId('button-ÈáçÁΩÆ');
      const nextButton = screen.getByTestId('button-‰∏ã‰∏Ä‰∏™');
      
      expect(playButton).not.toBeDisabled();
      expect(resetButton).not.toBeDisabled();
      expect(nextButton).not.toBeDisabled();
    });
  });

  describe('ÁªÑÂêàÊ∏≤ÊüìÊ®°Âºè', () => {
    it('Â∫îËØ•ÂêåÊó∂Ê∏≤ÊüìÊñáÊú¨ÂíåÊåâÈíÆ', () => {
      render(
        <div>
          <RobotController {...mockProps} renderTextOnly={true} />
          <RobotController {...mockProps} renderButtonsOnly={true} />
        </div>
      );
      
      expect(screen.getByText(/Episode: 1/)).toBeInTheDocument();
      expect(screen.getByTestId('button-Êí≠Êîæ')).toBeInTheDocument();
    });
  });

  describe('ËæπÁïåÊÉÖÂÜµ', () => {
    it('Â∫îËØ•Â§ÑÁêÜcurrentFrame‰∏∫Ë¥üÊï∞ÁöÑÊÉÖÂÜµ', () => {
      const negativeFrameProps = {
        ...mockProps,
        currentFrame: -1
      };
      
      render(<RobotController {...negativeFrameProps} renderTextOnly={true} />);
      
      expect(screen.getByText(/Â∏ßÊï∞: 0 \/ 100/)).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜcurrentFrameË∂ÖËøámotionDataLengthÁöÑÊÉÖÂÜµ', () => {
      const overflowFrameProps = {
        ...mockProps,
        currentFrame: 150,
        motionDataLength: 100
      };
      
      render(<RobotController {...overflowFrameProps} renderTextOnly={true} />);
      
      expect(screen.getByText(/Â∏ßÊï∞: 151 \/ 100/)).toBeInTheDocument();
    });
  });
}); 